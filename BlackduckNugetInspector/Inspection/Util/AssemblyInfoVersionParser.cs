using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection.Emit;
using System.Text;

namespace Com.Synopsys.Integration.Nuget.Inspection.Util
{
    class AssemblyInfoVersionParser
    {
        public enum ConfidenceLevel
        { 
            HIGH,
            MEDIUM,
            LOW
        }

        public class AssemblyVersionResult
        {
            public ConfidenceLevel confidence { get; }
            public string version { get; }
            public string path { get; }

            public AssemblyVersionResult(ConfidenceLevel confidence, string version, string path)
            {
                this.confidence = confidence;
                this.version = version;
                this.path = path;
            }
        }

        public static AssemblyVersionResult ParseVersion(string path)
        {
            try
            {
                List<string> contents = new List<string>(File.ReadAllLines(path));
                List<string> potentialVersionLines = contents.FindAll(text => text.Contains("AssemblyFileVersion"));
                bool containsAutoGen = contents.Any(text => text.Contains("This code was generated by a tool.") || text.Contains("Generated by the MSBuild WriteCodeFragment"));
                if (potentialVersionLines == null || potentialVersionLines.Count == 0)
                {
                    potentialVersionLines = contents.FindAll(text => text.Contains("AssemblyVersion"));
                }
                if (potentialVersionLines != null)
                {
                    foreach (string text in potentialVersionLines)
                    {
                        String versionLine = text.Trim();
                        if (!versionLine.StartsWith("//"))
                        {
                            int firstParen = versionLine.IndexOf("(");
                            int lastParen = versionLine.LastIndexOf(")");
                            // exclude the '(' and the " characters
                            int start = firstParen + 2;
                            // exclude the ')' and the " characters
                            int end = lastParen - 1;
                            string version = versionLine.Substring(start, (end - start));

                            bool startsWithBracket = versionLine.StartsWith("[");

                            ConfidenceLevel confidence = ConfidenceLevel.LOW;
                            if (startsWithBracket && containsAutoGen)
                            {
                                confidence = ConfidenceLevel.HIGH;
                            } else if (startsWithBracket || containsAutoGen)
                            {
                                confidence = ConfidenceLevel.MEDIUM;
                            }

                            Console.WriteLine($"Potential version '{version}' found with confidence '{confidence}' in '{path}'.");
                            return new AssemblyVersionResult(confidence, version, path);
                        }
                    }
                }
                return null;
            }
            catch (Exception e)
            {
                Console.WriteLine("Unable to find version for assembly path: " + path);
                Console.WriteLine("The issue was: " + e.Message);
                return null;
            }
        }
    }
}
